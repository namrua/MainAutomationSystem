@model DistanceClassTemplateCompletionPageModel
@{
    ViewBag.Title = CommonResources.MenuDistanceCoordinatorDistanceTemplates;
    ViewBag.ActiveMainMenuItemId = MenuItemId.DistanceCoordinatorDistanceTemplates;

    var tabMenuItems = ViewServices.LayoutHelper.GetTabMenuItems(TabItemId.DistanceTemplate, TabItemId.DistanceTemplateCompletion, new { id = Model.ShortDetail.DistanceClassTemplateId });
    Html.RenderPartial("~/Views/Shared/_TabMenu.cshtml", tabMenuItems);
}

@using (var bg = Html.ButtonGroup(ButtonGroupType.TopCommandsGroup))
{
    @bg.Command(CommonResources.Complete, ButtonStyle.Primary, !Model.CanComplete, new { id = "complete-button" })
    @bg.Link(CommonResources.CompletionSettings, ButtonStyle.Normal, Url.Action("CompletionSettings", new { id = Model.ShortDetail.DistanceClassTemplateId }))
    @bg.Link(CommonResources.Back, ButtonStyle.Normal, Url.Action("Index"))
}

<div class="badge-title">
    <h4>@Model.ShortDetail.Title</h4>
    @Html.DistanceClassTemplateStateBadge(Model.ShortDetail.TemplateState)
</div>

<div class="row">

    <div class="col-xl-6 align-content-start">

        <h5>Completion</h5>

        <dl class="row dl-compact">

            <dt class="col-sm-4">@Html.DisplayNameFor(x => x.AutomationCompleteTime)</dt>
            <dd class="col-sm-8">@Html.DisplayFor(x => x.AutomationCompleteTime, new { ShowOnlyDate = true})</dd>
            <dt class="col-sm-4">@Html.DisplayNameFor(x => x.Completed)</dt>
            <dd class="col-sm-8">@Html.DisplayFor(x => x.Completed)</dd>

        </dl>

    </div>

</div>

@if (Model.GeneratingRequests.Count != 0)
{
    <hr />
    <h5>Completion processing</h5>
    <table class="table table-hover table-sm">
        <thead>
            <tr>
                <th>@Html.DisplayNameFor(x => x.GeneratingRequests[0].AsyncRequestType)</th>
                <th>@Html.DisplayNameFor(x => x.GeneratingRequests[0].ProcessingState)</th>
                <th>@Html.DisplayNameFor(x => x.GeneratingRequests[0].Started)</th>
                <th>@Html.DisplayNameFor(x => x.GeneratingRequests[0].Finished)</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Model.GeneratingRequests)
            {
                <tr class="@CssClassHelper.New().AddIf(item.ProcessingStateId != ProcessingStateEnum.Finished, "table-warning").Render()">
                    <td>@Html.DisplayFor(x => item.AsyncRequestType)</td>
                    <td>@Html.DisplayFor(x => item.ProcessingState)</td>
                    <td>@Html.DisplayFor(x => item.Started)</td>
                    <td>@Html.DisplayFor(x => item.Finished)</td>
                </tr>
            }
        </tbody>
    </table>
}

@section scripts
{

    <script type="text/javascript">

        var runPageScript = function () {

            var requestHelper = new CorabeuControl.RequestHelper();
            requestHelper.addAction("complete", "@Url.Action("Complete", new { id = Model.ShortDetail.DistanceClassTemplateId })")

            $("#complete-button").click(function () {
                var confirmed = confirm("@TextHelper.ToHtmlString($"Are you sure to complete distance class template {Model.ShortDetail.Title}?")")
                if (!confirmed)
                {
                    return;
                }

                requestHelper.executePost("complete");
            });

        }

    </script>
}